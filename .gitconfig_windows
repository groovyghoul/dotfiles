[user]
	name = fill_this_in
	email = fill_this_in
[core]
	editor = vim
	autocrlf = true
    ignorecase = true
[credential]
	helper = !\"C:/Program Files/GitExtensions/GitCredentialWinStore/git-credential-winstore.exe\"
[alias]
	lg = log --graph --decorate --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	conflicts = diff --name-only --diff-filter=U
	oops = reset --soft HEAD~1
	fuckedup = reset --hard
	dt = difftool
	mt = mergetool 
	a = "!git add . && git status"
	s = status
	au = "!git add -u && git status"
	aa = "!git add . && git add -u && git status"
	c = commit
	cm = commit -m
	la = "!git config -l | grep alias | cut -c 7-" 
    branchesin = branch --merged       # Check which branches are merged
    branchesout = branch --no-merged   # Check which branches are not merged
    e = "!git diff | $EDITOR"            # pipe the diff output to your editor of choice
    rbi = "!git rebase -i @{u}"          # interactive rebase on unpushed commits
    w = whatchanged                    # show logs with the differences introduced by each commit
    rf = reflog                        # reference log that manages when tips of branches are updated
	aliases = config --get-regexp alias
    untracked =  ls-files --others --exclude-standard  # useful to show files in new untracked directories
    dryrun = add --dry-run -A .   # shows what files would be included in an "add all"
    showstash = stash show -p 
    vc = log --format=%B -n 1     # shows the commit message for a given SHA
    
#### comment/uncomment to use any of the configured merge tools ####
[merge]
	# tool = winmerge
	# tool = meld
	# tool = semanticmerge
    tool = kdiff3
	conflictstyle = diff3

[mergetool]
	keepBackup = false
	trustExitCode = false

#### comment/uncomment to use any of the configured diff tools ####
[diff]
	# tool = winmerge
	tool = meld
    # tool = semanticdiff

[difftool]
	prompt = false

#### WinMerge Configuration ####

[mergetool "winmerge"]
	cmd = \"C:/Program Files/WinMerge/WinMergeU.exe\" -e \"$MERGED\" \"$REMOTE\"
	path = C:/Program Files/WinMerge/WinMergeU.exe
[difftool "winmerge"]
	cmd = \"C:/Program Files/WinMerge/WinMergeU.exe\" -e \"$LOCAL\" \"$REMOTE\"
	path = C:/Program Files/WinMerge/WinMergeU.exe

#### Meld Configuration ####

[mergetool "meld"]
	cmd = \"C:/Program Files (x86)/meld/meld.exe\" --diff $BASE $LOCAL --diff $BASE $REMOTE --diff $LOCAL $BASE $REMOTE $MERGED
	path = C:/Program Files (x86)/meld/meld.exe
[difftool "meld"]
	cmd = \"C:/Program Files (x86)/meld/meld.exe\" \"$LOCAL\" \"$REMOTE\"
	path = C:/Program Files (x86)/meld/meld.exe

#### SemanticMerge Configuration ####

[mergetool "semanticmerge"]
	cmd = c:/Users/richard.GA/AppData/Local/PlasticSCM4/semanticmerge/mergetool.exe -b=\"$BASE\" -d=\"$LOCAL\" -s=\"$REMOTE\" -r=\"$MERGED\" -l=csharp -emt=\"mergetool.exe -b=\"\"@basefile\"\" -bn=\"\"@basesymbolic\"\" -s=\"\"@sourcefile\"\" -sn=\"\"@sourcesymbolic\"\" -d=\"\"@destinationfile\"\" -dn=\"\"@destinationsymbolic\"\" -r=\"\"@output\"\" -t=\"\"@filetype\"\" -i=\"\"@comparationmethod\"\" -e=\"\"@fileencoding\"\"\" -edt=\"mergetool.exe  -s=\"\"@sourcefile\"\" -sn=\"\"@sourcesymbolic\"\" -d=\"\"@destinationfile\"\" -dn=\"\"@destinationsymbolic\"\" -t=\"\"@filetype\"\" -i=\"\"@comparationmethod\"\" -e=\"\"@fileencoding\"\"\"
[difftool "semanticdiff"]
	cmd = c:/Users/richard.GA/AppData/Local/PlasticSCM4/semanticmerge/mergetool.exe -s=\"$LOCAL\" -d=\"$REMOTE\"


[mergetool "kdiff3"]
    cmd = \"C:\\\\Program Files\\\\KDiff3\\\\kdiff3\" $BASE $LOCAL $REMOTE -o $MERGED
    keepBackup = false
##################

##### AN EXAMPLE OF MY WORKFLOW #####

# $ git checkout feature-branch
# ...do work
# $ git commit -am "[ref: 000] did some work"
#           ...do work
# $         git commit -am "[ref: 000] did some more work"
# $ git fetch
# $ git rebase origin/master
#           ...do work
#           $ git commit -am "[ref: 000] do even more work"
#           $ git fetch
#           $ git rebase origin/master
# $ git rebase -i
# ...squash commits
# $ git checkout master
# $ git merge --no-ff feature-branch
# $ git push origin master
# $ git branch -d feature-branch
# ...do it all over again

##### COMMANDS TO REMEMBER #####

# Fetch a file from another branch without changing your current branch
#    $ git checkout <OTHER_BRANCH> -- path/to/file


# Any change you make that affects a branch is recorded in the reflog
#    $ git reflog

# rbi - rebase interactive on our unpushed commits.
  #
  # Before we push our local changes, we may want to do some cleanup,
  # to improve our commit messages or squash related commits together.
  #
  # Let’s say I’ve pushed two commits that are related to a new feature and
  # I have another where I made a spelling mistake in the commit message.
  # When I run "git rbi" I get dropped into my editor with this:
  #
  #     pick 7f06d36 foo
  #     pick ad544d0 goo
  #     pick de3083a hoo
  #
  # Let's say I want to squash the "foo" and "goo" commits together,
  # and also change "hoo" to say "whatever". To do these, I change "pick"
  # to say "s" for squash; this tells git to squash the two together;
  # I also edit "hoo". I make the file look like:
  #
  #     pick 7f06d36 foo
  #     s ad544d0 goo
  #     r de3083a whatever
  # This gives me two new commit messages to edit, which I update.
  # Now when I push the remote repo host receives two commits
  #
  #     3400455 - foo
  #     5dae0a0 - whatever
  #
 #    rbi = !git rebase -i @{u}
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
[push]
	default = simple
#[credential]
#	helper = wincred
[credential]
	writelog = true
